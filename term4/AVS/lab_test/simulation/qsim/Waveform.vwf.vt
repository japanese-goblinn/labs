// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/18/2019 19:39:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] A;
reg [4:0] B;
reg Sign;
// wires                                               
wire C;
wire [4:0] Q;

// assign statements (if any)                          
lab_test i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.Q(Q),
	.Sign(Sign)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 4 ]
initial
begin
	repeat(3)
	begin
		A[4] = 1'b1;
		A[4] = #160000 1'b0;
		# 160000;
	end
	A[4] = 1'b1;
end 
// A[ 3 ]
initial
begin
	repeat(6)
	begin
		A[3] = 1'b0;
		A[3] = #80000 1'b1;
		# 80000;
	end
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	repeat(12)
	begin
		A[2] = 1'b0;
		A[2] = #40000 1'b1;
		# 40000;
	end
	A[2] = 1'b0;
end 
// A[ 1 ]
always
begin
	A[1] = 1'b0;
	A[1] = #20000 1'b1;
	#20000;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b0;
	A[0] = #10000 1'b1;
	#10000;
end 
// B[ 4 ]
initial
begin
	repeat(50)
	begin
		B[4] = 1'b1;
		B[4] = #9920 1'b0;
		# 9920;
	end
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	repeat(100)
	begin
		B[3] = 1'b0;
		B[3] = #4960 1'b1;
		# 4960;
	end
	B[3] = 1'b0;
	B[3] = #4960 1'b1;
end 
// B[ 2 ]
initial
begin
	repeat(201)
	begin
		B[2] = 1'b0;
		B[2] = #2480 1'b1;
		# 2480;
	end
	B[2] = 1'b0;
	B[2] = #2480 1'b1;
end 
// B[ 1 ]
initial
begin
	repeat(403)
	begin
		B[1] = 1'b0;
		B[1] = #1240 1'b1;
		# 1240;
	end
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	repeat(806)
	begin
		B[0] = 1'b0;
		B[0] = #620 1'b1;
		# 620;
	end
	B[0] = 1'b0;
end 

// Sign
initial
begin
	repeat(1612)
	begin
		Sign = 1'b0;
		Sign = #310 1'b1;
		# 310;
	end
	Sign = 1'b0;
	Sign = #310 1'b1;
end 
endmodule

